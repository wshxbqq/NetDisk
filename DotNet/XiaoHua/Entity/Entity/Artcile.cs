/*
insert license info here
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace XiaoHua.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed  class Artcile
	{

		#region Private Members
		private bool _isChanged;

		private int _articleid; 
		private TypeChild _typechildid; 
		private string _articleauthor; 
		private string _articletitle; 
		private DateTime _articledate; 
		private string _articletext; 
		private int _articlereadcount; 
		private string _extent; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// </summary>
		public Artcile()
		{
			_articleid = 0; 
			_typechildid = new TypeChild(); 
			_articleauthor = String.Empty; 
			_articletitle = String.Empty; 
			_articledate = DateTime.MinValue; 
			_articletext = String.Empty; 
			_articlereadcount = 0; 
			_extent = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor


		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int Articleid
		{
			get { return _articleid; }
			set
			{
				_isChanged |= ( _articleid != value ); 
				_articleid = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public TypeChild TypeChildid
		{
			get { return _typechildid; }
			set
			{
				_isChanged |= ( _typechildid != value ); 
				_typechildid = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ArticleAuthor
		{
			get { return _articleauthor; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ArticleAuthor", value, value.ToString());
				
				_isChanged |= (_articleauthor != value); _articleauthor = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ArticleTitle
		{
			get { return _articletitle; }

			set	
			{	
				if(  value != null &&  value.Length > 1000)
					throw new ArgumentOutOfRangeException("Invalid value for ArticleTitle", value, value.ToString());
				
				_isChanged |= (_articletitle != value); _articletitle = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public DateTime ArticleDate
		{
			get { return _articledate; }
			set
			{
				_isChanged |= ( _articledate != value ); 
				_articledate = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ArticleText
		{
			get { return _articletext; }

			set	
			{	
				if(  value != null &&  value.Length > 1073741823)
					throw new ArgumentOutOfRangeException("Invalid value for ArticleText", value, value.ToString());
				
				_isChanged |= (_articletext != value); _articletext = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public int ArticleReadCount
		{
			get { return _articlereadcount; }
			set
			{
				_isChanged |= ( _articlereadcount != value ); 
				_articlereadcount = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string Extent
		{
			get { return _extent; }

			set	
			{	
				if(  value != null &&  value.Length > 1073741823)
					throw new ArgumentOutOfRangeException("Invalid value for Extent", value, value.ToString());
				
				_isChanged |= (_extent != value); _extent = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public  bool IsChanged
		{
			get { return _isChanged; }
		}
				
		#endregion 
	}
}
