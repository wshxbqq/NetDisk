/*
insert license info here
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace XiaoHua.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed  class TypeRoot
	{

		#region Private Members
		private bool _isChanged;

		private int _typerootid; 
		private IList<TypeChild> _TypeChildList; 
		private string _typerootname; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// </summary>
		public TypeRoot()
		{
			_typerootid = 0; 
			_TypeChildList = new List<TypeChild>();
			_typerootname = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor


		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int TypeRootid
		{
			get { return _typerootid; }
			set
			{
				_isChanged |= ( _typerootid != value ); 
				_typerootid = value;
			}

		}
			
		public IList<TypeChild> TypeChildList
		{
			get
			{
				return _TypeChildList;
			}
			set
			{
				_TypeChildList = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public string TypeRootName
		{
			get { return _typerootname; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for TypeRootName", value, value.ToString());
				
				_isChanged |= (_typerootname != value); _typerootname = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public  bool IsChanged
		{
			get { return _isChanged; }
		}
				
		#endregion 
	}
}
