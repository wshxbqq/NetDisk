/*
insert license info here
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace PingShu.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed  class ArtType
	{

		#region Private Members
		private bool _isChanged;

		private int _arttype_id; 
		private IList<Artist> _ArtistList; 
		private string _arttype_name; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// </summary>
		public ArtType()
		{
			_arttype_id = 0; 
			_ArtistList = new List<Artist>();
			_arttype_name = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor


		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int ArtTypeId
		{
			get { return _arttype_id; }
			set
			{
				_isChanged |= ( _arttype_id != value ); 
				_arttype_id = value;
			}

		}
			
		public IList<Artist> ArtistList
		{
			get
			{
				return _ArtistList;
			}
			set
			{
				_ArtistList = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public string ArtTypeName
		{
			get { return _arttype_name; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ArtTypeName", value, value.ToString());
				
				_isChanged |= (_arttype_name != value); _arttype_name = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public  bool IsChanged
		{
			get { return _isChanged; }
		}
				
		#endregion 
	}
}
