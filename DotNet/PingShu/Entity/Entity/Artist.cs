/*
insert license info here
*/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace PingShu.Entity
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public sealed  class Artist
	{

		#region Private Members
		private bool _isChanged;

		private int _artist_id; 
		private IList<Book> _BookList; 
		private ArtType _type_id; 
		private string _artist_name; 
		private string _artist_ico; 
		private string _artist_details; 		
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// </summary>
		public Artist()
		{
			_artist_id = 0; 
			_BookList = new List<Book>();
			_type_id = new ArtType(); 
			_artist_name = String.Empty; 
			_artist_ico = String.Empty; 
			_artist_details = String.Empty; 
		}
		#endregion // End of Default ( Empty ) Class Constuctor


		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>
		public int ArtistId
		{
			get { return _artist_id; }
			set
			{
				_isChanged |= ( _artist_id != value ); 
				_artist_id = value;
			}

		}
			
		public IList<Book> BookList
		{
			get
			{
				return _BookList;
			}
			set
			{
				_BookList = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public ArtType TypeId
		{
			get { return _type_id; }
			set
			{
				_isChanged |= ( _type_id != value ); 
				_type_id = value;
			}

		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ArtistName
		{
			get { return _artist_name; }

			set	
			{	
				if(  value != null &&  value.Length > 100)
					throw new ArgumentOutOfRangeException("Invalid value for ArtistName", value, value.ToString());
				
				_isChanged |= (_artist_name != value); _artist_name = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ArtistIco
		{
			get { return _artist_ico; }

			set	
			{	
				if(  value != null &&  value.Length > 200)
					throw new ArgumentOutOfRangeException("Invalid value for ArtistIco", value, value.ToString());
				
				_isChanged |= (_artist_ico != value); _artist_ico = value;
			}
		}
			
		/// <summary>
		/// 
		/// </summary>
		public string ArtistDetails
		{
			get { return _artist_details; }

			set	
			{	
				if(  value != null &&  value.Length > 500)
					throw new ArgumentOutOfRangeException("Invalid value for ArtistDetails", value, value.ToString());
				
				_isChanged |= (_artist_details != value); _artist_details = value;
			}
		}
			
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public  bool IsChanged
		{
			get { return _isChanged; }
		}
				
		#endregion 
	}
}
